name: Build and Test

on:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
        - linux/ppc64le
        - linux/s390x
        base:
        - core
        - core18
        - core20
        include:
        - base: core
          platform: linux/386
        - base: core18
          platform: linux/386
        exclude:
        - base: core
          platform: linux/s390x
        # ARMv7 is broken currently: https://bugs.launchpad.net/qemu/+bug/1886811
        - base: core20
          platform: linux/arm/v7
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./${{ matrix.base }}-stable.Dockerfile
        platforms: ${{ matrix.platform }}
        tags: test-image
        push: false
        outputs: type=docker,dest=test-image.tar
    - name: Save container image
      id: save_image
      run: |
        echo ::set-output name=image_name::"$(echo "${{matrix.base}}-${{matrix.platform}}.tar" | sed 's|/|_|g')"
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.save_image.outputs.image_name }}
        path: ./test-image.tar

  test-build-snap:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        experimental: [false]
        channel:
        - latest/stable
        - latest/candidate
        platform:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
        - linux/ppc64le
        base:
        - core
        - core18
        - core20
        
        include:
        - base: core
          platform: linux/386
          channel: latest/stable
          experimental: false
        - base: core
          platform: linux/386
          channel: latest/candidate
          experimental: false
        - base: core18
          platform: linux/386
          channel: latest/stable
          experimental: false
        - base: core18
          platform: linux/386
          channel: latest/candidate
          experimental: false
        - base: core18
          platform: linux/s390x
          channel: latest/candidate
          experimental: true
        - base: core20
          platform: linux/s390x
          channel: latest/stable
          experimental: true

        exclude:
        # ARMv7 is broken currently: https://bugs.launchpad.net/qemu/+bug/1886811
        - base: core20
          platform: linux/arm/v7
          channel: latest/stable
          experimental: false
        - base: core20
          platform: linux/arm/v7
          channel: latest/candidate
          experimental: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Enable Docker experimental
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json > /dev/null
        sudo systemctl restart docker
    - name: Disable conflicting AppArmor rules
      run: |
        sudo mv /etc/apparmor.d/usr.lib.snapd.snap-confine.real /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/disable/usr.lib.snapd.snap-confine.real
    - name: Load container image
      id: load_image
      run: |
        echo ::set-output name=image_name::"$(echo "${{matrix.base}}-${{matrix.platform}}.tar" | sed 's|/|_|g')"
    - uses: actions/download-artifact@v3
      with:
        name: ${{ steps.load_image.outputs.image_name }}
        path: ./artifacts
    - name: Test build a Snap
      id: build
      run: |
        docker image load -i ./artifacts/test-image.tar
        docker run --rm --tty --privileged \
          --volume "$GITHUB_WORKSPACE/tests/${{ matrix.base }}":"$GITHUB_WORKSPACE/tests/${{ matrix.base }}" \
          --workdir "$GITHUB_WORKSPACE/tests/${{ matrix.base }}" \
          --env USE_SNAPCRAFT_CHANNEL="${{ matrix.channel }}" \
          --platform "${{ matrix.platform }}" \
          test-image snapcraft

  test-set-channel:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        experimental: [false]
        channel:
        - latest/stable
        - latest/candidate
        platform:
        - linux/amd64
        - linux/arm64
        - linux/arm/v7
        - linux/ppc64le
        base:
        - core
        - core18
        - core20
        
        include:
        - base: core
          platform: linux/386
          channel: latest/stable
          experimental: false
        - base: core
          platform: linux/386
          channel: latest/candidate
          experimental: false
        - base: core18
          platform: linux/386
          channel: latest/stable
          experimental: false
        - base: core18
          platform: linux/386
          channel: latest/candidate
          experimental: false
        - base: core18
          platform: linux/s390x
          channel: latest/candidate
          experimental: true
        - base: core20
          platform: linux/s390x
          channel: latest/stable
          experimental: true

        exclude:
        # ARMv7 is broken currently: https://bugs.launchpad.net/qemu/+bug/1886811
        - base: core20
          platform: linux/arm/v7
          channel: latest/stable
          experimental: false
        - base: core20
          platform: linux/arm/v7
          channel: latest/candidate
          experimental: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Enable Docker experimental
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json > /dev/null
        sudo systemctl restart docker
    - name: Disable conflicting AppArmor rules
      run: |
        sudo mv /etc/apparmor.d/usr.lib.snapd.snap-confine.real /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/disable/usr.lib.snapd.snap-confine.real
    - name: Load container image
      id: load_image
      run: |
        echo ::set-output name=image_name::"$(echo "${{matrix.base}}-${{matrix.platform}}.tar" | sed 's|/|_|g')"
    - uses: actions/download-artifact@v3
      with:
        name: ${{ steps.load_image.outputs.image_name }}
        path: ./artifacts
    - name: Test changing channel
      run: |
        docker image load -i ./artifacts/test-image.tar
        
          docker run --rm --tty --privileged \
            --platform "${{ matrix.platform }}" \
            --env USE_SNAPCRAFT_CHANNEL="${{ matrix.channel }}" \
            test-image snap info snapcraft --color=never &> output.txt
            
        CHANNEL="$(cat output.txt | \
          tr '\r\n' '\n' | \
          awk 'BEGIN { FS = ":" }; /^tracking:/ { gsub(/ /, "", $2); print $2 }'
        )"
        
        echo "Snapcraft channel in use: $CHANNEL"

        echo ::group
        cat output.txt
        echo ::endgroup

        [ -n "$CHANNEL" ] && [ "$CHANNEL" = "${{ matrix.channel }}" ]

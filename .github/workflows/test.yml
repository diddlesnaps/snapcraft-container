name: Build and Test

on:
  pull_request:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.matrix.outputs.build_matrix }}
      test_matrix: ${{ steps.matrix.outputs.test_matrix }}
    steps:
    - name: Generate Build Matrix
      id: matrix
      run: |
        PLATFORMS=(linux/386 linux/amd64 linux/arm/v7 linux/arm64 linux/ppc64le) # linux/s390x)
        BASES=(core core18 core20 core22)

        BUILD_MATRIX=
        TEST_MATRIX=

        for platform in ${PLATFORMS[@]}; do
          experimental=false
          [ "$platform" = "linux/s390" ] && experimental=true
          for base in ${BASES[@]}; do
            [ "$platform" = "linux/386"  ] &&   [ "$base" != "core" ] && [ "$base" != "core18" ]   && continue
            [ "$platform" = "linux/s390" ] && ( [ "$base"  = "core" ] || [ "$base"  = "core18" ] ) && continue

            channel=latest/candidate

            case $base in
              core)
                os=xenial
                channel=4.x/stable
                experimenal=true
                ;;
              core18)
                os=bionic
                channel=5.x/stable
                ;;
              core20)
                os=focal
                ;;
              core22)
                os=jammy
                ;;
            esac
            BUILD_MATRIX="${BUILD_MATRIX:+$BUILD_MATRIX,}{\"platform\":\"$platform\",\"base\":{\"snap\":\"$base\",\"os\":\"$os\"},\"experimental\":$experimental}"
            TEST_MATRIX="${TEST_MATRIX:+$TEST_MATRIX,}{\"platform\":\"$platform\",\"channel\":\"$channel\",\"base\":\"$base\",\"experimental\":$experimental}"
          done
        done
        echo "::echo::on"
        echo "::set-output name=build_matrix::{\"include\":[$BUILD_MATRIX]}"
        echo "::set-output name=test_matrix::{\"include\":[$TEST_MATRIX]}"
      
  build:
    name: Build PR
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.build_matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ matrix.platform }}
        tags: test-image
        push: false
        outputs: type=docker,dest=test-image.tar
        build-args:
          BASE_OS=${{ matrix.base.os }}
    - name: Save container image
      id: save_image
      run: |
        echo ::set-output name=image_name::"$(echo "${{matrix.base.snap}}-${{matrix.platform}}.tar" | sed 's|/|_|g')"
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.save_image.outputs.image_name }}
        path: ./test-image.tar

  test-build-snap:
    name: Test Build Snap
    runs-on: ubuntu-latest
    needs: [ generate-matrix, build ]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.test_matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Enable Docker experimental
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json > /dev/null
        sudo systemctl restart docker
    - name: Load container image
      id: load_image
      run: |
        echo ::set-output name=image_name::"$(echo "${{matrix.base}}-${{matrix.platform}}.tar" | sed 's|/|_|g')"
    - uses: actions/download-artifact@v3
      with:
        name: ${{ steps.load_image.outputs.image_name }}
        path: ./artifacts
    - name: Test build a Snap
      id: build
      run: |
        docker image load -i ./artifacts/test-image.tar
        docker run --rm --tty --privileged \
          --volume "$GITHUB_WORKSPACE/tests/${{ matrix.base }}":"/data" \
          --workdir "/data" \
          --env USE_SNAPCRAFT_CHANNEL="${{ matrix.channel }}" \
          --platform "${{ matrix.platform }}" \
          test-image snapcraft

  test-set-channel:
    name: Test Set Channel
    runs-on: ubuntu-latest
    needs: [ generate-matrix, build ]
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.test_matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Enable Docker experimental
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json > /dev/null
        sudo systemctl restart docker
    - name: Load container image
      id: load_image
      run: |
        echo ::set-output name=image_name::"$(echo "${{matrix.base}}-${{matrix.platform}}.tar" | sed 's|/|_|g')"
    - uses: actions/download-artifact@v3
      with:
        name: ${{ steps.load_image.outputs.image_name }}
        path: ./artifacts
    - name: Test changing channel
      run: |
        docker image load -i ./artifacts/test-image.tar
        
        echo ::group
        docker run --rm --tty --privileged \
          --platform "${{ matrix.platform }}" \
          --env USE_SNAPCRAFT_CHANNEL="${{ matrix.channel }}" \
          test-image snap info snapcraft --color=never 2>&1 | tee output.txt
        echo ::endgroup
            
        CHANNEL="$(cat output.txt | \
          tr '\r\n' '\n' | \
          awk 'BEGIN { FS = ":" }; /^tracking:/ { gsub(/ /, "", $2); print $2 }'
        )"
        
        echo "Snapcraft channel in use: $CHANNEL"

        [ -n "$CHANNEL" ] && [ "$CHANNEL" = "${{ matrix.channel }}" ]
